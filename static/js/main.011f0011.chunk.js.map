{"version":3,"sources":["Components/DisplayComponent.js","Components/BtnComponent.js","App.js","serviceWorker.js","index.js"],"names":["DisplayComponent","props","time","h","m","s","ms","BtnComponent","status","className","onClick","start","stop","reset","resume","App","useState","setTime","interv","setInterv","setStatus","run","setInterval","updatedMs","updatedS","updatedM","updatedH","clearInterval","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oPAqBeA,MAnBf,SAA0BC,GASxB,OACE,6BARoB,IAAjBA,EAAMC,KAAKC,EACP,GAEA,6BAAK,8BAAQF,EAAMC,KAAKC,GAAI,GAAKF,EAAMC,KAAKC,EAAI,IAAIF,EAAMC,KAAKC,GAA/D,aAON,8BAAQF,EAAMC,KAAKE,GAAI,GAAKH,EAAMC,KAAKE,EAAI,IAAIH,EAAMC,KAAKE,GAF3D,YAGC,8BAAQH,EAAMC,KAAKG,GAAI,GAAKJ,EAAMC,KAAKG,EAAI,IAAIJ,EAAMC,KAAKG,GAH3D,YAIC,8BAAQJ,EAAMC,KAAKI,IAAK,GAAKL,EAAMC,KAAKI,GAAK,IAAIL,EAAMC,KAAKI,IAJ7D,aCeWC,MAzBf,SAAsBN,GACpB,OACE,6BACoB,IAAjBA,EAAMO,OACP,4BAAQC,UAAU,kCAAkCC,QAAST,EAAMU,OAAnE,SAAyF,GAEvE,IAAjBV,EAAMO,OACP,6BACH,4BAAQC,UAAU,kCAAkCC,QAAST,EAAMW,MAAnE,QAEI,4BAAQH,UAAU,kCAAkCC,QAAST,EAAMY,OAAnE,UACM,GAGW,IAAjBZ,EAAMO,OACP,6BACH,4BAAQC,UAAU,kCAAkCC,QAAST,EAAMa,QAAnE,UAEI,4BAAQL,UAAU,kCAAkCC,QAAST,EAAMY,OAAnE,UACM,K,MC4CEE,MA5Df,WAAgB,IAAD,EACUC,mBAAS,CAACV,GAAG,EAAGD,EAAE,EAAGD,EAAE,EAAGD,EAAE,IADtC,mBACND,EADM,KACAe,EADA,OAEeD,qBAFf,mBAENE,EAFM,KAEEC,EAFF,OAGeH,mBAAS,GAHxB,mBAGNR,EAHM,KAGEY,EAHF,KASPT,EAAO,WACXU,IACAD,EAAU,GACVD,EAAUG,YAAYD,EAAI,MAGxBE,EAAUrB,EAAKI,GAAIkB,EAAStB,EAAKG,EAAGoB,EAASvB,EAAKE,EAAGsB,EAASxB,EAAKC,EAEjEkB,EAAM,WAcV,OAbiB,KAAbI,IACFC,IACAD,EAAS,GAEM,KAAbD,IACFC,IACAD,EAAS,GAEO,KAAdD,IACFC,IACAD,EAAU,GAEZA,IACON,EAAQ,CAACX,GAAGiB,EAAWlB,EAAEmB,EAAUpB,EAAEqB,EAAUtB,EAAEuB,KAiB1D,OACE,yBAAKjB,UAAU,gBACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,CAAkBP,KAAMA,IACxB,kBAAC,EAAD,CAAcM,OAAQA,EAAQM,OARtB,kBAAMH,KAQgCC,KAnBxC,WACZe,cAAcT,GACdE,EAAU,IAiBsDP,MAdnD,WACbc,cAAcT,GACdE,EAAU,GACVH,EAAQ,CAACX,GAAG,EAAGD,EAAE,EAAGD,EAAE,EAAGD,EAAE,KAWmDQ,MAAOA,QC9CrEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.011f0011.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction DisplayComponent(props) {\r\n  const h= () => {\r\n  \tif (props.time.h === 0) {\r\n  \t\treturn '';\r\n  \t}else{\r\n  \t\treturn <app><span>{(props.time.h >=10)? props.time.h : \"0\"+props.time.h}</span>&nbsp;:&nbsp;</app>\r\n  \t}\r\n  }\r\n\r\n  return (\r\n    <div>\r\n    \t{h()}\r\n    \t<span>{(props.time.m >=10)? props.time.m : \"0\"+props.time.m}</span>&nbsp;:&nbsp;\r\n    \t<span>{(props.time.s >=10)? props.time.s : \"0\"+props.time.s}</span>&nbsp;:&nbsp;\r\n    \t<span>{(props.time.ms >=10)? props.time.ms : \"0\"+props.time.ms}</span>&nbsp;&nbsp;\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DisplayComponent;\r\n","import React from 'react';\r\n\r\nfunction BtnComponent(props) {\r\n  return (\r\n    <div>\r\n     {(props.status === 0)?\r\n     \t<button className=\"stopwatch-btn stopwatch-btn-gre\" onClick={props.start}>Start</button>:\"\"\r\n     }\r\n     {(props.status === 1)?\r\n     \t<div>\r\n\t\t\t<button className=\"stopwatch-btn stopwatch-btn-red\" onClick={props.stop}>Stop</button>\r\n     \t\t\r\n     \t\t<button className=\"stopwatch-btn stopwatch-btn-yel\" onClick={props.reset}>Reset</button>\r\n     \t</div>:\"\"\r\n     }\r\n\r\n     {(props.status === 2)?\r\n     \t<div>\r\n\t\t\t<button className=\"stopwatch-btn stopwatch-btn-gre\" onClick={props.resume}>Resume</button>\r\n     \t\t\r\n     \t\t<button className=\"stopwatch-btn stopwatch-btn-yel\" onClick={props.reset}>Reset</button>\r\n     \t</div>:\"\"\r\n     }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BtnComponent;\r\n","import React, {useState} from 'react';\nimport DisplayComponent from './Components/DisplayComponent';\nimport BtnComponent from './Components/BtnComponent'; \nimport './App.css';\n\nfunction App() {\n  const [time, setTime] =useState({ms:0, s:0, m:0, h:0});\n  const [interv, setInterv] = useState();\n  const [status, setStatus] = useState(0);\n\n  //Not started =0;\n  //started =1;\n  //pause=2;\n\n  const start =() => {\n    run();\n    setStatus(1);\n    setInterv(setInterval(run,10));\n  }\n\n  var updatedMs=time.ms, updatedS=time.s, updatedM=time.m, updatedH=time.h;\n\n  const run = () =>{\n    if (updatedM === 60) {\n      updatedH++;\n      updatedM=0;\n    }\n    if (updatedS === 60) {\n      updatedM++;\n      updatedS=0;\n    }\n    if (updatedMs === 60) {\n      updatedS++;\n      updatedMs=0;\n    }\n    updatedMs++;\n    return setTime({ms:updatedMs, s:updatedS, m:updatedM, h:updatedH});\n  }\n\n    const stop =() => {\n    clearInterval(interv);\n    setStatus(2);\n  }\n\n    const reset =() => {\n    clearInterval(interv);\n    setStatus(0);\n    setTime({ms:0, s:0, m:0, h:0});\n  }\n\n    const resume =() => start();\n\n\n  return (\n    <div className=\"main-section\">\n      <div className=\"clock-holder\">\n        <div className=\"stopwatch\">\n          <DisplayComponent time={time}/>\n          <BtnComponent status={status} resume={resume} stop={stop} reset={reset} start={start}/>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}